# Chapter 7 - Positioning and stacking contexts

- The initial value of position for all elements is static. When you change this
  value to anything else, the element is said to be positioned. An element with
  static positioning is therefore not positioned.

# Fixed positioning
- Applying position: fixed; to an element lets you position the element arbitrarily
  within the viewport. This is done with four companion properties: top, right,
  bottom, and left. The values you assign to these properties specify how far the
  fixed element should be from each eadge of the browser viewport. e.g.

    .modal-backdrop {
      position: fixed;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
      background-color: rgba(0,0,0,0.5);
    }

    .modal-body {
      position: fixed;
      top: 3em;
      bottom: 3em;
      right: 20%;
      left: 20%;
      padding: 2em 3em;
      background-color: white;
      overflow: auto;
    }

  - Here the top ruleset defines a translucent backdrop that will cover the whole
    viewport, while the bottom rulset defines a modal window that sits centrally
    on the backdrop.
- When positioning an element, you're not required to specify values for all four
  sides. You can specify only the sides you need and then use width and/or height
  to help determine its size. e.g.

    .nav-menu {
      position: fixed;
      top: 1em;
      right: 1em;
      width: 20%;
    }

  - This positions the element to the top right of the page with a width of 20% of
    the viewport, an arrangment suitable for a navigation menu.

# Absolute positioning
- Absolute positioning works the same way as fixed positioning, except that the
  containing block for the element is it's closest positioned ancestor rather than
  the toplevel viewport. e.g.

    .modal-close {
      position: absolute;
      top: 0.3em;
      right: 0.3em;
      padding: 0.3em;
      cursor: pointer;
    }

  - This positions an close button in the top-right corner of modal window.
- If none of an element's ancestors are positioned, then the absolutely positioned
  element will be positioned based on something called the initial containing block.
  This is an area with dimensions equal to the viewport size, anchored at the top of
  the page.

# Relative positioning
- When you first apply position: relative; to an element, you won't usually see any
  visible change on the page. The relatively positioned element, and all the
  elements on the page around it, will remain exactly where they were. The change
  comes when applying top, right, bottom and left, which shift the element away
  from its original position. This won't change the position of any elements around
  the relatively positioned element and so this may induce some overlap.
- It's rare that you will use relative positioning to move an element. Far more
  often, you'll use position: relative to establish the containing block for an
  absolutely positioned element inside it. e.g.

    .dropdown {
      display: inline-block;
      position: relative;
    }

    .dropdown-menu {
      display: none;
      position: absolute;
      left: 0;
      top: 2.1em;
      min-width: 100%;
      background-color; #eee;
    }

    .dropdown:hover .dropdown-menu {
      display: block;
    }

  - This is the CSS for a hover dropdown menu, where the parent dropdown element
    is positioned relative in order to enable the child dropdown-menu to position
    absolutely.

# Stacking contexts and z-index

## Understanding the rendering process and stacking order
- As the browser parses HTML into the DOM, it also creates another tree structure
  called the render tree. This represents the visual appearance and position of each
  element. It's also responsible for determining the order in which the browser will
  paint the elements. This order is important because elements painted later appear
  in front of elements painted earlier, should they happen to overlap.
- Under normal circumstances (that is, before positioning is applied), this order is
  determined by the order the elements appear in the HTML.
- This behaviour changes when you start positioning elements. The browser first
  paints all non-positioned elements, then it paints the positioned ones. This means
  positioned elements will appear in front by default.

## Manipulating stacking order with z-index
- The z-index allows you to control the stacking order of your elements. It accepts
  integer values (positive and negative) with higher values being stacked over
  lower values. e.g.

    .modal-backdrop {
      position: fixed;
      ...
      z-index: 1;
    }

    .modal-body {
      position: fixed;
      ...
      z-index: 2;
    }

  - Here z-index is used to ensure the modal body sits above the backdrop in the
    stacking order, regardless of the source order in the HTML.
- Two things to bear in mind with z-index are: it only works on positioned elements;
  and applying z-index to a positioned element establishes something called a
  stacking context.

## Understanding stacking contexts
- A stacking context consists of an element or a group of elements that are painted
  together by the browser. One element is the root of the stacking context, so when
  you add a z-index to a positioned element that element becomes the root of a new
  stacking context. All of its descendant elements are then part of the stacking
  context.
- Because all elements of the stacking context are painted together, it's not
  possible to insert an element from outside the stacking context between any two
  elements within it.
- This equally means that if you have two adjacent elements each with their own
  stacking context, it's not possible to place a descendant element of one stacking
  context above (or below) the other stacking context, without changing the z-index
  of the root element as well.
- In addition to adding a z-index to a positioned element, it's also possible to
  create a stacking context in the following ways: setting an opacity less than 1;
  setting the transform property; and setting the filter property. The document root
  <html> also creates a top-level stacking context for the whole page.
- All elements within a stacking context are stacked in this order, from back to
  front:
  - The root element of the stacking context.
  - Positioned elemetns with a negative z-index (along with their children).
  - Non-positioned elements.
  - Positioned elements with a z-index of auto (and their children).
  - Positioned elements with a positive z-index (and their children).

# Sticky positioning
- A relatively new positioning option called "sticky" positioning, is a hybrid
  between relative and fixed positioning: the element scrolls normally with the
  page until it reaches a specified point on the screen, at which point it will
  "lock" into place as teh user continues to scroll. The common use-cases for this
  are sidebar navigation or top menubars. e.g.

    .container {
      display: flex;
      width: 80%;
      max-width: 1000px;
      margin: 1em auto;
      min-height: 100vh;
    }

    .col-main {
      flex: 1 80%;
    }

    .col-sidebar {
      flex: 20%;
    }

    .affix {
      position: sticky;
      top: 1em;
    }

  - Here the affix class keeps an element 1em from the top of the viewport as soon
    as it would otherwise start to be hidden by scrolling.
  - This sticky behaviour will only occur if the height of the parent element is
    higher than the sticky element, and the sticky element will "unlock" and resume
    scrolling offscreen when it reaches the bottom of the parent element.
